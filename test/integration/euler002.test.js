import { describe, it, expect } from 'vitest'
import { withPrevious, takeWhile, isLesserThanOrEqualTo as lte, repeat, sum, filter, flat, isEven } from '../../src'

/*
  Project Euler #2: Even Fibonacci Numbers
  https://projecteuler.net/problem=2

  Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
  By starting with 1 and 2, the first 10 terms will be:
  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
  
  By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
  find the sum of the even-valued terms.
*/
describe('Project Euler #2', () => {
  it('Taowei implementation matches imperative solution and yields 233168', () => {
    // Taowei implementation
    const taoweiResult = (() => {
      const fibonacci = withPrevious(2)(flat([1, 2, repeat(sum)]))
      const evenFibonacci = filter(isEven)(fibonacci)
      const firstEvenFibonacci = takeWhile(lte(4_000_000))(evenFibonacci)
      return sum(firstEvenFibonacci)
    })()

    // Imperative implementation
    const imperativeResult = (() => {
      let a = 1, b = 2, sum = 0
        
        while (b <= 4_000_000) {
          if (b % 2 === 0) {
            sum += b
          }
          
          const next = a + b
          a = b
          b = next
        }
        
        return sum
    })()

    expect(taoweiResult).toBe(imperativeResult)
    expect(taoweiResult).toBe(4_613_732)
  })
})
